{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["PERSON","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","other","showPersons","nameChangedHandler","event","personIndex","findIndex","pers","person","target","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","this","map","index","key","style","backgroundColor","border","padding","cursor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAeeA,G,YAZA,SAACC,GACf,OACC,yBAAKC,UAAU,UACd,uBAAGC,QAASF,EAAMG,OAAlB,OACMH,EAAMI,KADZ,WAC0BJ,EAAMK,IADhC,eAGA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAAOV,EAAMI,UCwE7CO,E,4MA7EdC,MAAQ,CACPC,QAAS,CACR,CAAEC,GAAI,KAAMV,KAAM,MAAOC,IAAK,IAC9B,CAAES,GAAI,KAAMV,KAAM,OAAQC,IAAK,IAC/B,CAAES,GAAI,KAAMV,KAAM,QAASC,IAAK,KAEjCU,MAAO,aACPC,aAAa,G,EAGdC,mBAAqB,SAACC,EAAOJ,GAC5B,IAAMK,EAAc,EAAKP,MAAMC,QAAQO,WAAU,SAACC,GACjD,OAAOA,EAAKP,KAAOA,KAGdQ,EAAM,eAAQ,EAAKV,MAAMC,QAAQM,IAEvCG,EAAOlB,KAAOc,EAAMK,OAAOb,MAE3B,IAAMG,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQM,GAAeG,EAEvB,EAAKE,SAAS,CAAEX,QAASA,K,EAG1BY,oBAAsB,SAACN,GACtB,IAAME,EAAI,YAAO,EAAKT,MAAMC,SAC5BQ,EAAKK,OAAOP,EAAa,GACzB,EAAKK,SAAS,CAAEX,QAASQ,K,EAG1BM,qBAAuB,WACtB,IAAMC,EAAW,EAAKhB,MAAMI,YAC5B,EAAKQ,SAAS,CAAER,aAAcY,K,uDAGrB,IAAD,OAQJf,EAAU,KAoBd,OAlBIgB,KAAKjB,MAAMI,cACdH,EACC,6BACEgB,KAAKjB,MAAMC,QAAQiB,KAAI,SAACR,EAAQS,GAChC,OACC,kBAAC,EAAD,CACC5B,MAAO,kBAAM,EAAKsB,oBAAoBM,IACtC3B,KAAMkB,EAAOlB,KACbC,IAAKiB,EAAOjB,IACZ2B,IAAKV,EAAOR,GACZL,QAAS,SAACS,GAAD,OAAW,EAAKD,mBAAmBC,EAAOI,EAAOR,YAS/D,yBAAKb,UAAU,OACd,oDACA,sDACA,4BAAQgC,MA/BI,CACbC,gBAAiB,aACjBC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,WA2BenC,QAAS2B,KAAKF,sBAApC,kBAGCd,O,GAxEayB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.250f5111.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css';\n\nconst PERSON = (props) => {\n\treturn (\n\t\t<div className='Person'>\n\t\t\t<p onClick={props.click}>\n\t\t\t\tI'm {props.name} & I am {props.age} years old!\n\t\t\t</p>\n\t\t\t<p>{props.children}</p>\n\t\t\t<input type='text' onChange={props.changed} value={props.name} />\n\t\t</div>\n\t);\n};\n\nexport default PERSON;\n","import React, { Component } from 'react';\nimport './App.css';\nimport PERSON from './Person/Person';\n\nclass App extends Component {\n\tstate = {\n\t\tpersons: [\n\t\t\t{ id: 'a1', name: 'Max', age: 32 },\n\t\t\t{ id: 'b2', name: 'Manu', age: 12 },\n\t\t\t{ id: 'c3', name: 'Steph', age: 26 }\n\t\t],\n\t\tother: 'some value',\n\t\tshowPersons: false\n\t};\n\n\tnameChangedHandler = (event, id) => {\n\t\tconst personIndex = this.state.persons.findIndex((pers) => {\n\t\t\treturn pers.id === id;\n\t\t});\n\n\t\tconst person = { ...this.state.persons[personIndex] };\n\n\t\tperson.name = event.target.value;\n\n\t\tconst persons = [...this.state.persons];\n\t\tpersons[personIndex] = person;\n\n\t\tthis.setState({ persons: persons });\n\t};\n\n\tdeletePersonHandler = (personIndex) => {\n\t\tconst pers = [...this.state.persons];\n\t\tpers.splice(personIndex, 1);\n\t\tthis.setState({ persons: pers });\n\t};\n\n\ttogglePersonsHandler = () => {\n\t\tconst doesShow = this.state.showPersons;\n\t\tthis.setState({ showPersons: !doesShow });\n\t};\n\n\trender() {\n\t\tconst STYLE = {\n\t\t\tbackgroundColor: 'lightgreen',\n\t\t\tborder: '1px solid blue',\n\t\t\tpadding: '8px',\n\t\t\tcursor: 'pointer'\n\t\t};\n\n\t\tlet persons = null;\n\n\t\tif (this.state.showPersons) {\n\t\t\tpersons = (\n\t\t\t\t<div>\n\t\t\t\t\t{this.state.persons.map((person, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<PERSON\n\t\t\t\t\t\t\t\tclick={() => this.deletePersonHandler(index)}\n\t\t\t\t\t\t\t\tname={person.name}\n\t\t\t\t\t\t\t\tage={person.age}\n\t\t\t\t\t\t\t\tkey={person.id}\n\t\t\t\t\t\t\t\tchanged={(event) => this.nameChangedHandler(event, person.id)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Hi, I am a React App</h1>\n\t\t\t\t<p>This is really working!</p>\n\t\t\t\t<button style={STYLE} onClick={this.togglePersonsHandler}>\n\t\t\t\t\tToggle persons\n\t\t\t\t</button>\n\t\t\t\t{persons}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}